" Nik's Vimrc (OLD)
" =================
" {{{

" TODO configure ALE
" TODO configure lightline /
" TODO configure vim commentary(your own comment styles), surround (<++>)
" TODO configure taglist
" TODO syntax highlighting problems
" TODO highlight your own set of keywords using dictionaires (come up with a system/
" interface so you only need to add words and the color and not care about conflicting
" with the color scheme ( words like TODO, WARNING, CAUTION. DONE, etc )
" TODO put all your highlighting options in an if block that checks whether a
" color scheme is being used
" TODO put all "programming language" filetypes into an array and use it everywhere
" TODO make a flow chart/workflow for opening and accesing files from within vim itself
	" 1. cd then Files(fzf.vim)
	" 2. ctrl-p/fzf (:FZF dir)
	" 3. Locate
	" 4. find/path
	" 5. loaded buffers Buffers(fzf.vim)
	" 6. old files/History(fzf.vim)
" TODO make an operator (that takes a motion) for numbering lists in markdown/plaintext
" TODO write external filters see ~/.vim/filters/readme.md:10
" TODO write help documentation for the new things you have included
" TODO load plugins conditionally using vimplug
" TODO learn vim fugitive and vim plug
" TODO make scheme for checking for external programs wherever vim depends on
" external programs for example :
" to use ag instead of grep, change 0 (make sure it is installed) , try to
" match grep and ag in terms of flags, to preserve functionality
" if empty(system('type -p ag')) == '1'
" 	set grepprg=ag\ --vimgrep\ --silent\ $* /dev/null
" 	set grepformat=%f:%l:%c:%m
" endif
" TODO implement best practices for overriding colorschemes

" }}}


" interesting plugins:
" --------------------
" Plug 'ap/vim-css-color', { 'for' : ['css', 'i3config' ] }
" Plug 'mengelbrecht/lightline-bufferline'
" Plug 'lingceng/z.vim'
" Plug 'yegappan/lid', { 'for' : ['c', 'cpp', 'java', 'asm', 'perl', 'lisp'] }
" Plug 'mattn/emmet-vim', { 'for' : ['html', 'xml', 'css'] }
" Plug 'ledesmablt/vim-run'
" Plug 'tpope/vim-fugitive'
" Plug 'yegappan/taglist', {'for': 'c'}
" Plug 'junegunn/vim-easy-align'
" Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } | Plug 'junegunn/fzf.vim'
" Plug 'dense-analysis/ale', {'for' : ['c', 'cpp', 'sh', 'bash', 'java'] }
" Plug 'donRaphaco/neotex', { 'for': 'tex' }
" Plug 'itchyny/lightline.vim'

" General Settings {{{

" setting cursor colors
" refer to /usr/share/vim/vim81/doc/term.txt:323
" CAUTION: changes terminal colors (fix this behavior)
" let &t_SI = "\<Esc>]12;cyan\x7"  	" SI = INSERT mode
" let &t_SR = "\<Esc>]12;red\x7"    	" SR = REPLACE mode
" let &t_EI = "\<Esc>]12;grey\x7"  	" EI = NORMAL mode

" distinguish cursor appearance in different modes
" https://vim.fandom.com/wiki/Change_cursor_shape_in_different_modes
" Cursor shapes/settings:
"  1 -> blinking block
"  2 -> solid block
"  3 -> blinking underscore
"  4 -> solid underscore
"  5 -> blinking vertical bar
"  6 -> solid vertical bar
let &t_SI .= "\<Esc>[6 q"
let &t_SR .= "\<Esc>[4 q"
let &t_EI .= "\<Esc>[2 q"

let g:loaded_not_my_statusline = 1 	" uncomment if using another statusline 
set laststatus=2	                " always show statusline
set showcmd			                " show normal mode commands (below statusline)
if g:loaded_not_my_statusline
    set noshowmode
endif

" speed up vim
set nocursorline
set nocursorcolumn
set scrolljump=5
" CAUTION: statusline will not be drawn instantly on open if lazydraw is enabled
set lazyredraw
set synmaxcol=100
set ttyfast

" do not create backups
set nobackup
set swapfile
set dir=~/temp/vim_swapfiles

" always show statusline
set laststatus=2

" turn off syntax highlighting in certain modes
" TODO all syntax is turned off when spell is triggered, fix it
" au OptionSet spell ownsyntax off
" au OptionSet diff ownsyntax off

" matched highlight colors
hi Search ctermfg=black ctermbg=cyan

" diff mode colors
hi DiffAdd ctermbg=black ctermfg=darkcyan
hi DiffChange ctermbg=none ctermfg=darkblue
hi DiffDelete ctermbg=none ctermfg=red
hi DiffText ctermbg=none ctermfg=darkred

" turn syntax off when vim is started in diff mode from the terminal
if &diff
	syntax off
endif

" spell mode colors
hi SpellBad ctermbg=none ctermfg=darkred
hi SpellCap ctermbg=none ctermfg=yellow
hi SpellLocal ctermbg=none ctermfg=green
hi SpellRare ctermbg=none ctermfg=cyan

" match pairs (can be extended using the vim matchit plugin)
set matchpairs+=<:>

" force recognize syntax for some files
augroup ForceFiletypes
	au!
	au BufNewFile,BufRead *.ckt,*.cir :setlocal filetype=spice
	au BufNewFile,BufRead *.desktop,mimeapps.list,*.toml :setlocal filetype=dosini
    au BufNewFile,BufRead *.bmd :setlocal filetype=beamer
    au BufNewFile,BufRead *.plt,*.gnu,.gnuplot :setlocal filetype=gnuplot
augroup END

augroup ForceSyntax
    au!
    au FileType beamer :setlocal syntax=markdown
	au FileType gnuplot :setlocal syntax=bash
augroup END

" some quickfix window settings
augroup QuickFix
	au!
    " au FileType qf map <buffer> j j
    " au FileType qf map <buffer> k k
    au FileType qf setlocal norelativenumber modifiable
	au QuickFixCmdPost [^l]* nested copen
	au QuickFixCmdPost l* nested lwindow
augroup END
 " }}}

" Keymaps / Leader Key settings
" TODO redo keymaps in the style of spacemacs/spacevim/doom-emacs
" {{{

" i don't use ex mode or the U normal mode commands
map Q <Nop>
nnoremap U :echoerr "!!CAPS LOCK IS (PROBABLY) ON!!"<CR>:2sleep<CR>

" Make backspacing easier
" Note: consider remapping capslock to (left) control
" and left control to capslock
inoremap <C-h> <C-left>
inoremap <C-l> <C-right>
inoremap <C-;> <C-w>
inoremap <C-Space> <BS>

" save file
nnoremap <C-s> :update<CR>
inoremap <C-s> <Esc>:update<CR>

" Temporary {{{
augroup MiscFiletypeKeymaps
	" remap s,S for html files to start inside a tag
	au!
	" html
	au FileType html nnoremap <buffer> so ^t/i<CR> <Esc>O
	au FileType html nnoremap <buffer> ss cit
	au FileType html nnoremap <buffer> si s
	au FileType html nnoremap <buffer> <silent> sa ^/\(<\/[^<>]\+>\<bar>-->\)<CR>:noh<CR>i
	au FileType html nnoremap <buffer> sc i<!-- * --><Esc>F*s
	" vim
	au FileType vim nnoremap <buffer> <F1> :source $MYVIMRC<CR>
	au FileType vim nnoremap <buffer> <F2> :PlugInstall<CR>
	au FileType vim nnoremap <buffer> <F3> :PlugClean<CR>
	au FileType * nnoremap gco :call ToggleAutoComment()<CR>
augroup END

let b:autocomment = 0
function! ToggleAutoComment() abort
    if !b:autocomment
	setlocal formatoptions+=cro
	let b:autocomment = 1
    else
	setlocal formatoptions-=cro
	let b:autocomment = 0
    endif
endfunction



augroup MiscFiletypeSettings
    au!
	au BufWritePre *.py :%s/\s\+$//e        " remove trailing whitespaces
	au FileType haskell :setlocal expandtab " ghc does not like spaces
	au BufWritePre *.hs :%s/\t/    /ge      " convert tabs to (4) spaces
	au FileType gitcommit :0read![[ -f ./last_changes.log ]] && cat ./last_changes.log
	au FileType gitcommit :setlocal textwidth=72 
	au FileType html,bash,java,tex,arduino :setlocal softtabstop=2 tabstop=2 shiftwidth=2
	au FileType c :setlocal complete-=i  " ignore names from headers
    au FileType c,python,bash,java,markdown,text :setlocal textwidth=79
    au FileType c,python,bash,java,markdown,text :let &colorcolumn=&textwidth
    au FileType tex :setlocal synmaxcol=999
    " mark column at textwidth'th column
augroup END
" }}}

" substitute all occurance of word under cursor
" TODO turn this into an omap so you can make it work in motion regions
" TODO display the word under the cursor * -> .,$ while # -> .,0 
nnoremap <leader>r* :exe "verbose :%s/".expand('<cword>')."//g"<left><left><left>

" f5 to refresh
map <F5> :redraw<CR>:redrawstatus<CR>:redrawtabline<CR>:echo "screen refreshed"<CR>

" center text on next / previous match and end of file
nnoremap G Gzz
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz
" nnoremap `` ``zz
" nnoremap '' ''zz

" center search results on hitting enter
cnoremap <silent> <expr> <CR> getcmdtype() =~ '[/?]' ? '<CR>zz' : '<CR>'

" extend text object surroundings ( add elements in the array textobj )
" TODO leaarn about operator mapping, are the xnoremaps necessary ?
let textobj = [ "<bar>", "\\", "/", "_", ".", "*", "-", "$" ]
for obj in textobj
	exe "xnoremap <silent> i" . obj . " :<C-U>normal! T" . obj . "vt" . obj . "<CR>"
	exe "xnoremap <silent> a" . obj . " :<C-U>normal! F" . obj . "vf" . obj . "<CR>"
	exe "onoremap <silent> i" . obj . " :<C-U>normal! T" . obj . "vt" . obj . "<CR>"
	exe "onoremap <silent> a" . obj . " :<C-U>normal! F" . obj . "vf" . obj . "<CR>"
endfor

" make J(join lines) an operator accepting motions!
function! GJoinoperator(submode)
		'[,']join!
endfunction
nnoremap <buffer> gJ :set operatorfunc=GJoinoperator<CR>g@
onoremap J j

" managing buffers / multiple files / files in arglist
	" open new buffer
nnoremap <silent> <leader>nb :enew<CR>
	" spawn new splits
nnoremap <silent> <leader>vb :vnew<CR>
nnoremap <silent> <leader>hb :new<CR>

" open an alternate file in a horizontal split
nnoremap <leader>sj :sp #<CR>
nnoremap <leader>sk :vs #<CR>

	" jump to alternate file (remap ctrl-^)
nnoremap ]a :buffer#<CR>
nnoremap [a :buffer#<CR>

	" fzf
	" TODO set hidden to avoid :update everytime ?
nnoremap <silent> <leader>. :update <bar> Files<CR>
nnoremap <silent> <leader>fh :update <bar> FZF $HOME<CR>
nnoremap <silent> <leader>fv :update <bar> FZF $MYVIM<CR>
nnoremap <silent> <leader>fc :update <bar> FZF $HOME/.config/<CR>
nnoremap <silent> <leader>fr :update <bar> History<CR>
nnoremap <silent> <leader>ba :update <bar> Buffers<CR>
nnoremap <silent> <leader>sb :BLines<CR>
nnoremap <silent> <leader>sa :Lines!<CR>
nnoremap <silent> <leader>s. :update <bar>Ag!<CR>
" inoremap <silent> <C-N> <plug>(fzf-complete-line)
" TODO multiselection using :Lines?
" TODO change the flags for the Ag command (see fzf documentation/refer to
" https://jesseleite.com/posts/4/project-search-your-feelings)

" Git FZF
" nnoremap <silent> <leader>gb :update <bar> BCommits!<CR>
" nnoremap <silent> <leader>ga :update <bar> Commits!<CR>

nnoremap <silent> <leader>? :Helptags<CR>
nnoremap <silent> <leader>km :Maps<CR>

" managing windows 
	"navigate/jump between open tabs
nnoremap <silent> ]<Tab> :tabnext<CR>
nnoremap <silent> [<Tab> :tabprev<CR>
	" change 2 split windows from vertical to horizontal or vice versa
noremap <leader>th <C-w>t<C-w>H
noremap <leader>tk <C-w>t<C-w>K
    " access commonly accessed files in splits quickly (and dynamically
    " depending on window width)
nnoremap <leader>bib :call DynamicOpen("$MYBIB")<CR>

" yank into system clipboard (xclip in Linux): use  register "+

" yank into unnamed register
nnoremap yr :let @" = expand("%:p:t")<CR>:echo "\"".@"."\" yanked"<CR>
nnoremap yp :let @" = expand("%:p:~")<CR>:echo "\"".@" . "\" yanked"<CR>
nnoremap yP :let @" = expand("%:p")<CR>:echo "\"".@" ."\" yanked"<CR>
nnoremap y<leader>p :let @"=expand("%:p:~").":".line(".")<CR>:echo "\"".@"."\" yanked"<CR>
nnoremap yd :let @" = expand("%:~:h")<CR>:echo "\"".@" . "\" yanked"<CR>
nnoremap yD :let @" = expand("%:p:h:~")<CR>:echo "\"".@" . "\" yanked"<CR>
command Date let @" = strftime('%b %d, %Y') <bar> echo "date: ".@"." yanked"
command Time let @" = strftime('%I:%M %p') <bar> echo "time: ".@"." yanked"

" read in text
	" gibberish TODO make this composable
command -nargs=+ Gibberish read !rdmt <args>
	" ipsum lorem TODO make this composable
command -nargs=+ IpsumLorem read !mylorem <args>

function! MakeHLine(...) range
    " Default comment and width
    let l:ch = (&commentstring)[0]
    let l:tw = &textwidth
    " Override defaults per given parameters
    if a:0
        let l:ch = a:1
        if a:0 == 2
            let l:tw = a:2
        endif
    endif
    " Do the actual work
    eval repeat(l:ch, l:tw)->append(line("."))
endfunction
command! -nargs=* Hline call MakeHLine(<f-args>)

" interface with unix utilities
command! -nargs=? -bang -complete=dir Ls echo system('ls -1 <args>')
command! -count=1 -nargs=* Tree echo system('tree --prune -L <count> <args>')
command! -nargs=0 RecentDir :call fzf#run ({'source': "zox -l | cut -d '|' -f1",
	\ 'sink': 'cd', 'down': '25%'}) <bar> :echo "in directory: ". getcwd()
nnoremap <leader>dr :RecentDir<CR> 

" {{{
let b:doc_settings_fileslist = ""
function OpenFiles(namelist)
    update
    for filename in a:namelist
        exec ":edit " . filename
    endfor
endfun 

augroup OpenDocumentSettings 
    au!
    au FileType markdown,beamer :let doc_settings_fileslist = [
                \'$HOME/.pandoc/defaults.yaml', 
                \'$HOME/.pandoc/metadata.yaml',
                \'$HOME/.pandoc/my.theme'
                \]
    au FileType latex,tex,plaintex,bib :let doc_settings_fileslist = [
                \'$MYTEXMF/mydigi.sty',
                \'$MYTEXMF/mygeneral.sty',
                \'$MYBIB'
                \]
    au FileType gnuplot :let doc_settings_fileslist = ['$HOME/.gnuplot']
augroup END 
nnoremap <leader>fs :call OpenFiles(doc_settings_fileslist)<CR>

" function! FitFunc()
" 	let _textwidth = &textwidth
" 	execute "global/.\\{"._textwidth."\\}/normal! gqq"
" 	echo "formatting done"
" endfunction 
" command! Fit :call FitFunc()
" }}}

" vimgrep, grep(/its alternatives) and further searching
" TODO make a more robust implementation:
" (https://vim.fandom.com/wiki/Search_for_visually_selected_text) allow * to
" be used for visual selection (you can then use n or N)
" xnoremap * y/\V<C-R>=@"<CR><CR>

" TODO nnoremap <leader>* to grep word under cursor and then bring up qf window
" TODO xnoremap <leader>* to grep for visually selected text and bring up qf window

" Todos
" -----
nnoremap <leader>td :vimgrep /TODO/ %<CR>/TODO\C<CR>

" TODO use a more sophhisticated system of using a function that takes in 
" the name of the compiler and allows you to change compiler flags on the fly
" maybe implement the compiler flags using an array ?
augroup Compilers
	au!
	au FileType bash,sh :setlocal makeprg=bash\ %
    au FileType awk :setlocal makeprg=bash\ -c\ %
	au FileType cpp :setlocal makeprg=g++\ -o\ %:r.out\ %
	au FileType java :setlocal makeprg=javac\ %\ &&\ java\ %:r
	" TODO below doesn't work fix it
	au BufNewFile,BufRead *.1 :setlocal makeprg=mandoc\ -K\ utf-8\ -Tutf8\ %\ \\\|\ col\ -bpx
    au BufNewFile,BufRead *.ms :setlocal makeprg=$(grog\ %)\ -Tpdf\ %:r.pdf
	au FileType verilog :setlocal makeprg=iverilog\ -o\ %:t:r.out\ %
    au FileType haskell :setlocal makeprg=ghc\ %
    au FileType tex :setlocal makeprg=pdflatex\ %
    au FileType python :setlocal makeprg=python3\ %
    au FileType beamer :setlocal makeprg=pandoc\ -f\ markdown\ -t\ beamer\ \ 
                \--pdf-engine=xelatex\ -o\ %:r.pdf\ %
    au FileType gnuplot :setlocal makeprg=gnuplot\ %
    au FileType matlab :setlocal makeprg=octave\ %
    au FileType javascript :setlocal makeprg=node\ %
    au FileType html :setlocal makeprg=mysee\ %
    au FileType arduino 
       \:setlocal makeprg=arduino-cli\ upload\ -p\ COM3\ --fqbn\ arduino:avr:uno\ %
    au FileType tcl :setlocal makeprg=tclsh\ %
augroup END

" TODO read input into quickfix buffer?
" introduce 3 types of compilation commands:
" types of "compilation":
" 	0.1. single file compilation
"	0.2. project compilation
" 1. for default quickfix/make (leader c c)
" 2. for loading content into buffer (use leader c b)
" 3. for viewing terminal output using a pager like less/more/etc (leader c p)

" Open compiled man page in split
" TODO turn this into a module for smartopen.vim
" make this availble to all programs for obtaining output
" function! Groff_ManCompile()
" 	call DynamicOpen('%:t.out')
" 	exec "read ! mandoc -K utf-8 -T utf8 ".expand('#:p')." | col -bx"
" 	setlocal filetype=man
" 	setlocal nonumber norelativenumber
" 	setlocal nomodifiable nomodified readonly
" endfunction

" make command line editing easier
cnoremap <c-h> <left>
cnoremap <c-l> <right>
cnoremap <c-j> <down>
cnoremap <c-k> <up>
cnoremap <c-s> <c-e><c-u>

" }}}


" Abbreviations {{{

cnoreab vds vertical diffsplit
cnoreab vh vertical help
cnoreab vsb vertical sbuffer
cnoreab vbs vertical sbuffer
cnoreab wbd write!<bar>bdelete!
cnoreab bdq bufdo bdelete<bar>quit

" common abbreviations/spelling mistakes (don't leave whitespaces!)
" TODO when the list grows too big, move this to another file in
" ~/.vim/plugin/ called abbrevs.vim/or iterate over an array for similar patterns
inoreab wont won't
inoreab youre you're
inoreab dont don't
inoreab doesnt doesn't
inoreab hasnt hasn't
inoreab isnt isn't
inoreab thats that's
inoreab wasnt wasn't
inoreab didnt didn't
inoreab couldnt couldn't
inoreab shouldnt shouldn't
inoreab havent haven't
inoreab wouldnt wouldn't
inoreab cant can't
inoreab varibale variable
inoreab Ive I've
inoreab lets let's
inoreab langauges languages

" }}}

" Language specific settings {{{

augroup LanguageSpecific
	au!
    au FileType mysql source ~/.vim/lang/_sql.vim
augroup END

" }}}

" Plugin settings {{{

" TODO display the number of loaded buffers (if non zero) :
" len(getbufinfo({'buflisted':1}))

" netrw
" -----
" open file explorer
nnoremap <buffer> <leader>fe :Lexplore<CR>

let g:netrw_banner       = 0
let g:netrw_liststyle    = 3
let g:netrw_browse_split = 4
let g:netrw_altv         = 1
let g:netrw_winsize      = 30
let g:netrw_list_hide    = &wildignore

augroup Netrw
	au!
	au FileType netrw map <buffer> q :quit!<CR>
augroup END

" emmet
" -----
" let g:user_emmet_mode='n' 				" normal mode only
let g:user_emmet_leader_key=','				" use ; instead?
let g:user_emmet_settings = {
\    'html': {
\        'empty_element_suffix': ' />',
\    },
\}

" ALE
" ---
" Linters
" TODO set linters

" Linting
let g:ale_lint_on_enter = 0
" let g:ale_lint_on_save = 1
" let g:ale_lint_delay = 500

" Signs/Icons
let g:ale_sign_error = "👎"
let g:ale_sign_warning = "💭"

" Colors
hi ALEErrorSign ctermfg=darkred
hi ALEWarningSign ctermfg=yellow

" Keymaps
" see: https://vi.stackexchange.com/questions/12973/ale-linter-eslint-jump-to-next-error/14307
nnoremap <silent> ]w :ALENext<CR>
nnoremap <silent> [w :ALEPrevious<CR>
nnoremap <silent> ]e :ALENext -error<CR>
nnoremap <silent> [e :ALEPrevious -error<CR>
nnoremap <leader>he :ALEDetail<CR>
nnoremap <leader>al :ALEToggle<CR>

" GNU ID tools

" }}}


" easy align
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
au FileType markdown vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>

" neotex latex live preview
" let g:neotex_enabled = 2 " always on by default
let g:neotex_delay = 200 " update every 0.5 seconds
nnoremap <leader>te :NeoTexOn<CR>

" lightline (refer to ~/.vim/plugged/lightline.vim/doc/lightline.txt:63)
let g:lightline = { 
            \ 'colorscheme': 'PaperColor', 
            \ 'active' : {
            \   'left' : [ [ 'mode', 'paste' ],
            \              [ 'readonly', 'buffnos', 'filename', 'modified' ] ],
		    \   'right': [ [ 'lines' ],
		    \            [ 'percent' ],
		    \            [ 'filetype', 'ftenc'] ] 
            \ },
            \ 'component': {
            \   'ftenc' : '%{&ff}/%{&fenc!=#""?&fenc:&enc}',
            \   'lines' : '%2c:%l/%L'
            \ },
            \ 'component_function' : {
            \   'buffnos' : 'NumberOfBuffers',
            \ },
            \ }

function! NumberOfBuffers() abort
	let l:bufno = len(getbufinfo({'buflisted':1}))
	let l:x = (l:bufno > 1) ? '/'.l:bufno : ''
    return bufnr('%') . x
endfunc
